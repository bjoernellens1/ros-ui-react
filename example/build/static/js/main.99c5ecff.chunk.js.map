{"version":3,"sources":["../../src/AxisBar.js","../../src/SimJoystick.js","../../src/SimGamepad.js","../../src/RealGamepad.js","../../src/JoystickHelpers.js","../../src/ImageStream.js","RealGamepadDemo.js","SimGamepadDemo.js","App.js","reportWebVitals.js","index.js"],"names":["AxisBar","_Component","props","call","_inheritsLoose","prototype","render","React","createElement","CProgress","color","value","this","showvalue","className","Component","SimJoystick","_this","move","event","x","size","y","stop","Joystick","baseColor","stickColor","SimGamepad","timerEnd","joyMsg","ROSLIB","Message","header","stamp","frame_id","axes","buttons","state","topic","publish","buttonOn","index","buttonVals","setState","buttonOff","joyStop","axisVals","joyMove","controllers","sticks","ros","Ros","_proto","componentDidMount","on","error","console","log","connect","rosbridgeAddress","Topic","name","messageType","setInterval","componentWillUnmount","close","_this2","cols","map","item","CCol","key","col","sm","md","xl","CButton","block","onPointerDown","onPointerUp","stickDisplays","axisDisplays","CCard","CCardHeader","CCardBody","CRow","RealGamepad","gamepadScanIntervalId","rosSendIntervalId","connecthandler","e","addgamepad","gamepad","disconnecthandler","removegamepad","updateStatus","_i","_Object$entries","Object","entries","length","val","deadzone","controller","i","push","pressed","prevState","t","Gamepads","start","addEventListener","clearInterval","defaultProps","ImageStream","style","width","height","src","objectFit","RealGamepadDemo","_jsxs","children","_jsx","SimGamepadDemo","Home","href","App","BrowserRouter","Switch","Route","exact","path","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99c5ecff.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport classNames from 'classnames'\nimport {\n  CProgress\n} from '@coreui/react'\n\n\n\n\nclass AxisBar extends Component {\n\n    constructor(props) {\n      super(props);\n    }\n  \n  \n  \n\n  \n    render() {\n\n  \n      return (\n        <CProgress\n        color=\"dark\"\n        value={50 * (this.props.value + 1)}\n        showvalue=\"true\"\n        className=\"mb-1\"\n      />\n\n  \n      );\n    }\n  }\n  \n  export default AxisBar;","\nimport React, { Component } from 'react';\nimport classNames from 'classnames'\nimport { Joystick } from 'react-joystick-component';\n\n\n\n\nclass SimJoystick extends Component {\n\n    constructor(props) {\n      super(props);\n    }\n  \n  \n  move = (event) =>\n  {\n      this.props.move(event.x/this.props.size, event.y/this.props.size);\n  }\n\n  stop = () =>\n  {\n      this.props.stop();\n  }\n\n  \n    render() {\n\n  \n      return (\n        <Joystick size={this.props.size*2} baseColor=\"CornflowerBlue\" stickColor=\"blue\" move={this.move} stop={this.stop} ></Joystick>\n\n  \n      );\n    }\n  }\n  \n  export default SimJoystick;","\nimport React, { Component } from 'react';\n// import classNames from 'classnames'\nimport {\n  CButton,\n  CRow,\n  CCol,\n  CCard,\n  CCardHeader,\n  CCardBody,\n  CProgress,\n  CProgressBar\n} from '@coreui/react'\nimport ROSLIB from 'roslib'\nimport AxisBar from './AxisBar';\nimport SimJoystick from './SimJoystick';\n\n\n\n\n\nclass SimGamepad extends Component {\n\n  constructor(props) {\n    super(props);\n    this.controllers = {};\n    this.state = {\n      buttons: [0,0,0,0],\n      axes: [0,0,0,0],\n      sticks: [0,0]\n    };\n    this.ros = new ROSLIB.Ros();\n  }\n\n\n\n\n  componentDidMount() {\n\n    // If there is an error on the backend, an 'error' emit will be emitted.\n    this.ros.on('error', function (error) {\n      console.log(error);\n    });\n\n    // Find out exactly when we made a connection.\n    this.ros.on('connection', function () {\n      console.log('Connection made!');\n    });\n\n    this.ros.on('close', function () {\n      console.log('Connection closed.');\n    });\n\n    this.ros.connect(this.props.rosbridgeAddress);\n\n    this.topic = new ROSLIB.Topic({\n      ros: this.ros,\n      name: '/joy',\n      messageType: 'sensor_msgs/Joy'\n    });\n\n    setInterval(this.timerEnd, 20);\n\n  }\n\n  componentWillUnmount () {\n    this.ros.close();\n  }\n\n\n  timerEnd = () => {\n\n    var joyMsg = new ROSLIB.Message({\n      header:\n      {\n        // seq: 0,\n        stamp: [0,0],\n        frame_id: \"\"\n      },\n      axes: [],\n      buttons: []\n    });\n\n\n    joyMsg.axes = this.state.axes;\n    joyMsg.buttons = this.state.buttons;\n\n    this.topic.publish(joyMsg);\n\n\n  }\n\n  buttonOn = (index) =>{\n    var buttonVals = this.state.buttons;\n    buttonVals[index] = 1;\n    this.setState({ buttons: buttonVals});\n  }\n\n  buttonOff = (index) =>{\n    var buttonVals = this.state.buttons;\n    buttonVals[index] = 0;\n    this.setState({ buttons: buttonVals});\n  }\n\n  joyStop = (index) =>{\n    var axisVals =  this.state.axes;\n    axisVals[2*index] = 0;\n    axisVals[2*index+1] = 0;\n    this.setState({ axes: axisVals});\n  }\n\n  joyMove = (x, y, index) =>{\n    var axisVals =  this.state.axes;\n    axisVals[2*index] = x;\n    axisVals[2*index+1] = y;\n    this.setState({ axes: axisVals});\n  }\n\n\n\n\n\n  render() {\n\n    let cols = this.state.buttons.map((item, index) => <CCol key={index} col=\"6\" sm=\"4\" md=\"2\" xl className=\"mb-3 mb-xl-0 d-grid gap-2\">\n      <CButton block=\"true\" color={item > 0 ? \"primary\" : \"secondary\"} onPointerDown={() => this.buttonOn(index)} onPointerUp={() => this.buttonOff(index)} >{index}</CButton>\n    </CCol>);\n\n    let stickDisplays = this.state.sticks.map((item, index) => <CCol key={index} col=\"6\" sm=\"4\" md=\"2\" xl className=\"mb-3 mb-xl-0\">\n      <SimJoystick size={40} move={(x,y) => this.joyMove(x,y, index)} stop={() => this.joyStop(index)} />\n      \n    </CCol>);\n\n    let axisDisplays = this.state.axes.map((item, index) => <CCol key={index} col=\"6\" sm=\"4\" md=\"2\" xl className=\"mb-3 mb-xl-0\">\n      <AxisBar value={item}/>\n    </CCol>);\n\n    return (\n\n      <CCard>\n        <CCardHeader>\n          <strong>Simulated Controller</strong>\n        </CCardHeader>\n        <CCardBody>\n          <CRow className=\"align-items-center\">\n            {cols}\n          </CRow>\n          <CRow className=\"align-items-center mt-3\" >\n            {axisDisplays}\n          </CRow>\n          <CRow className=\"align-items-center mt-3\" >\n            {stickDisplays}\n          </CRow>\n        </CCardBody>\n      </CCard>\n\n    );\n  }\n}\n\nexport { SimGamepad };","\nimport React, { Component } from 'react';\nimport classNames from 'classnames'\nimport {\n  CButton,\n  CRow,\n  CCol,\n  CCard,\n  CCardHeader,\n  CCardBody\n} from '@coreui/react'\nimport ROSLIB from 'roslib'\nimport AxisBar from './AxisBar';\nimport { applyDeadzone } from './JoystickHelpers'\nimport Gamepads from 'gamepads';\n\n\nclass RealGamepad extends Component {\n\n    gamepadScanIntervalId = 0;\n    rosSendIntervalId = 0;\n  constructor(props) {\n    super(props);\n    this.controllers = {};\n    this.state = {\n      buttons: [],\n      axes: [],\n      t: 0\n    };\n    this.ros = new ROSLIB.Ros();\n  }\n\n  static defaultProps = {\n    deadzone: 0.25\n  }\n\n\n\n  connecthandler = (e) => {\n    this.addgamepad(e.gamepad);\n  }\n\n\n  addgamepad = (gamepad) => {\n    this.controllers[gamepad.gamepad.index] = gamepad;\n    console.log(\"Gamepad Connected\");\n  }\n\n\n  disconnecthandler = (e) => {\n    this.removegamepad(e.gamepad);\n  }\n\n  removegamepad = (gamepad) => {\n    console.log(\"Gamepad Disconnected\");\n    delete this.controllers[gamepad.gamepad.index];\n  }\n\n  updateStatus = () => {\n    for (const [key, value] of Object.entries(this.controllers)) {\n      var controller = this.controllers[key].gamepad;\n      for (var i = 0; i < controller.buttons.length; i++) {\n        var val = controller.buttons[i];\n        var pressed = val == 1.0;\n        var touched = false;\n        if (typeof (val) == \"object\") {\n          pressed = val.pressed;\n          if ('touched' in val) {\n            touched = val.touched;\n          }\n          val = val.value;\n        }\n        var pct = Math.round(val * 100) + \"%\";\n      }\n    }\n  }\n\n\n  componentDidMount() {\n\n    // If there is an error on the backend, an 'error' emit will be emitted.\n    this.ros.on('error', function (error) {\n      console.log(error);\n    });\n\n    // Find out exactly when we made a connection.\n    this.ros.on('connection', function () {\n      console.log('Connection made!');\n    });\n\n    this.ros.on('close', function () {\n      console.log('Connection closed.');\n    });\n\n    this.ros.connect(this.props.rosbridgeAddress);\n\n    this.topic = new ROSLIB.Topic({\n      ros: this.ros,\n      name: '/joy',\n      messageType: 'sensor_msgs/Joy'\n    });\n\n    Gamepads.start();\n\n    Gamepads.addEventListener(\"connect\", this.connecthandler);\n    Gamepads.addEventListener(\"disconnect\", this.disconnecthandler);\n\n    this.rosSendIntervalId = setInterval(this.timerEnd, 20);\n\n  }\n\n  componentWillUnmount () {\n    this.ros.close();\n    Gamepads.stop();\n    clearInterval(this.rosSendIntervalId);\n  }\n\n\n  timerEnd = () => {\n    this.updateStatus();\n\n\n\n    var joyMsg = {\n      header:\n      {\n        // seq: 0,\n        stamp: [0,0],\n        frame_id: \"\"\n      },\n      axes: [],\n      buttons: []\n    };\n\n    if (this.controllers[0]) {\n      var controller = this.controllers[0].gamepad;\n      for (var i = 0; i < controller.axes.length; i++) {\n\n        joyMsg.axes.push(applyDeadzone(controller.axes[i], this.props.deadzone));\n      }\n      for (var i = 0; i < controller.buttons.length; i++) {\n        joyMsg.buttons.push(controller.buttons[i].pressed ? 1 : 0);\n      }\n      this.topic.publish(joyMsg);\n\n      var buttonVals = controller.buttons.map((item) => item.pressed);\n      var axes = controller.axes;\n\n      this.setState((prevState) => ({ t: prevState.t + 1, buttons: buttonVals, axes: axes }));\n\n    }\n  }\n\n\n\n\n\n  render() {\n\n    let cols = this.state.buttons.map((item, index) => <CCol key={index} col=\"6\" sm=\"4\" md=\"2\" xl className=\"mb-3 mb-xl-0  d-grid gap-2\">\n      <CButton block=\"true\" color={item > 0 ? \"primary\" : \"secondary\"}>{index}</CButton>\n    </CCol>);\n\n\n    let axisDisplays = this.state.axes.map((item, index) => <CCol key={index} col=\"6\" sm=\"4\" md=\"2\" xl className=\"mb-3 mb-xl-0\">\n      <AxisBar value={item}/>\n    </CCol>);\n\n    return (\n\n      <CCard>\n        <CCardHeader>\n          <strong>Real Controller</strong>\n        </CCardHeader>\n        <CCardBody>\n          <CRow className=\"align-items-center\">\n            {cols}\n          </CRow>\n          <CRow className=\"align-items-center mt-3\" >\n            {axisDisplays}\n          </CRow>\n        </CCardBody>\n      </CCard>\n\n    );\n  }\n}\n\nexport { RealGamepad };","export function applyDeadzone(val, deadzone) {\n\n    if (val > deadzone)\n    {\n        val -= deadzone;\n    }\n    else if (val < -deadzone)\n    {\n        val += deadzone;\n    }\n    else \n    {\n        val = 0;\n    }\n    return -val/(1.0 - deadzone);\n\n}","\nimport React, { Component } from 'react';\nimport {\n  CCard,\n  CCardHeader,\n  CCardBody\n} from '@coreui/react'\n\n\n\n\nclass ImageStream extends Component {\n\n    constructor(props) {\n        super(props);\n      }\n\n\n  render() {\n\n    return (\n\n      <CCard style={{width: \"100%\", height: \"100%\"}}>\n      <CCardHeader>\n        <strong>Image Stream</strong>\n      </CCardHeader>\n      <CCardBody>\n        <img src={this.props.src} style={{width: \"100%\", height: \"100%\", objectFit: \"contain\"}}></img>\n      </CCardBody>\n    </CCard>\n\n\n    \n\n    );\n  }\n}\n\nexport { ImageStream };","import { RealGamepad } from 'ros-ui-react';\nimport { ImageStream } from 'ros-ui-react';\nimport './App.css';\nimport './scss/style.scss';\n\nfunction RealGamepadDemo() {\n  return (\n    <div className=\"App\">\n      <ImageStream src=\"http://localhost:8080/stream?topic=/camera/image_raw\" />\n      <RealGamepad rosbridgeAddress=\"ws://localhost:9090\"/>\n    </div>\n  );\n}\n\nexport default RealGamepadDemo;\n","import { SimGamepad } from 'ros-ui-react';\nimport { ImageStream } from 'ros-ui-react';\nimport './App.css';\nimport './scss/style.scss';\n\nfunction SimGamepadDemo() {\n  return (\n    <div className=\"App\">\n      <ImageStream src=\"http://localhost:8080/stream?topic=/camera/image_raw\" />\n      <SimGamepad rosbridgeAddress=\"ws://localhost:9090\"/>\n    </div>\n  );\n}\n\nexport default SimGamepadDemo;\n","import { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport './scss/style.scss';\nimport RealGamepadDemo from './RealGamepadDemo';\nimport SimGamepadDemo from './SimGamepadDemo';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path=\"/simgamepaddemo\" name=\"Sim Gamepad Demo\"><SimGamepadDemo /></Route>\n        <Route exact path=\"/realgamepaddemo\" name=\"Real Gamepad Demo\"><RealGamepadDemo /></Route>\n        <Route path=\"/\" name=\"Home\"><Home /></Route>\n      </Switch>\n      </BrowserRouter>\n  );\n}\n\n\nfunction Home() {\n  return (\n    <div>\n    <h2>Home</h2>\n    <nav>\n          <ul>\n            <li>\n              <a href=\"/\">Home</a>\n            </li>\n            <li>\n              <a href=\"/simgamepaddemo\">Sim Gamepad Demo</a>\n            </li>\n            <li>\n              <a href=\"/realgamepaddemo\">Real Gamepad Demo</a>\n            </li>\n          </ul>\n      </nav>\n  </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}